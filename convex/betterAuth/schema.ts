// This file is auto-generated. Do not edit this file manually.
// To regenerate the schema, run:
// `npx @better-auth/cli generate --output undefined -y`

import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export const tables = {
	user: defineTable({
		name: v.string(),
		email: v.string(),
		emailVerified: v.boolean(),
		image: v.optional(v.union(v.null(), v.string())),
		createdAt: v.number(),
		updatedAt: v.number(),
		userId: v.optional(v.union(v.null(), v.string())),
		twoFactorEnabled: v.optional(v.union(v.null(), v.boolean())),
		metadata: v.optional(
			v.union(
				v.null(),
				v.object({}), // empty object
				v.object({
					name: v.object({
						firstName: v.string(),
						lastName: v.string(),
					}),
					bio: v.string(),
					isOnline: v.optional(v.union(v.null(), v.boolean()))
				})
			)
		),
	})
		.index("email_name", ["email", "name"])
		.index("name", ["name"])
		.index("userId", ["userId"]),
	session: defineTable({
		expiresAt: v.number(),
		token: v.string(),
		createdAt: v.number(),
		updatedAt: v.number(),
		ipAddress: v.optional(v.union(v.null(), v.string())),
		userAgent: v.optional(v.union(v.null(), v.string())),
		userId: v.string(),
		activeOrganizationId: v.optional(v.union(v.null(), v.string())),
	})
		.index("expiresAt", ["expiresAt"])
		.index("expiresAt_userId", ["expiresAt", "userId"])
		.index("token", ["token"])
		.index("userId", ["userId"]),
	account: defineTable({
		accountId: v.string(),
		providerId: v.string(),
		userId: v.string(),
		accessToken: v.optional(v.union(v.null(), v.string())),
		refreshToken: v.optional(v.union(v.null(), v.string())),
		idToken: v.optional(v.union(v.null(), v.string())),
		accessTokenExpiresAt: v.optional(v.union(v.null(), v.number())),
		refreshTokenExpiresAt: v.optional(v.union(v.null(), v.number())),
		scope: v.optional(v.union(v.null(), v.string())),
		password: v.optional(v.union(v.null(), v.string())),
		createdAt: v.number(),
		updatedAt: v.number(),
	})
		.index("accountId", ["accountId"])
		.index("accountId_providerId", ["accountId", "providerId"])
		.index("providerId_userId", ["providerId", "userId"])
		.index("userId", ["userId"]),
	verification: defineTable({
		identifier: v.string(),
		value: v.string(),
		expiresAt: v.number(),
		createdAt: v.number(),
		updatedAt: v.number(),
	})
		.index("expiresAt", ["expiresAt"])
		.index("identifier", ["identifier"]),
	jwks: defineTable({
		publicKey: v.string(),
		privateKey: v.string(),
		createdAt: v.number(),
	}),
	organization: defineTable({
		name: v.string(),
		slug: v.string(),
		logo: v.optional(v.union(v.null(), v.string())),
		createdAt: v.number(),
		metadata: v.optional(v.union(v.null(), v.string())),
	})
		.index("name", ["name"])
		.index("slug", ["slug"]),
	member: defineTable({
		organizationId: v.string(),
		userId: v.string(),
		role: v.string(),
		createdAt: v.number(),
	})
		.index("organizationId", ["organizationId"])
		.index("userId", ["userId"])
		.index("role", ["role"]),
	invitation: defineTable({
		organizationId: v.string(),
		email: v.string(),
		role: v.optional(v.union(v.null(), v.string())),
		status: v.string(),
		expiresAt: v.number(),
		inviterId: v.string(),
	})
		.index("organizationId", ["organizationId"])
		.index("email", ["email"])
		.index("role", ["role"])
		.index("status", ["status"])
		.index("inviterId", ["inviterId"]),
	twoFactor: defineTable({
		secret: v.string(),
		backupCodes: v.string(),
		userId: v.string(),
	})
		.index("userId", ["userId"]),
	deviceCode: defineTable({
		deviceCode: v.string(),
		userCode: v.string(),
		userId: v.optional(v.union(v.null(), v.string())),
		expiresAt: v.number(),
		status: v.string(),
		lastPolledAt: v.optional(v.union(v.null(), v.number())),
		pollingInterval: v.optional(v.union(v.null(), v.number())),
		clientId: v.optional(v.union(v.null(), v.string())),
		scope: v.optional(v.union(v.null(), v.string())),
	}),
	auditLogs: defineTable({
		userId: v.string(),
		action: v.string(),
		timestamp: v.string(),
		ipAddress: v.string(),
		userAgent: v.string(),
		severity: v.string(),
		type: v.string(),
	})
		.index("userId", ["userId"]),
	attendance: defineTable({
		userId: v.string(),
		orgId: v.string(),
		role: v.string(),
		date: v.string(),
		clockIn: v.string(),
		lunchBreakOut: v.string(),
		lunchBreakReturn: v.string(),
		clockOut: v.string(),
		status: v.string(),
		totalWorkSeconds: v.number(),
		totalBreakSeconds: v.number(),
		wasLate: v.boolean(),
		earlyOut: v.boolean(),
		timesUpdated: v.number(),
		operation: v.array(v.string()),
	})
		.index("userId", ["userId"])
		.index("orgId", ["orgId"]),
};

const schema = defineSchema(tables);

export default schema;
